#!/usr/bin/env python3
"""
Aplicaci√≥n principal de migraci√≥n de monolito a microservicios
"""
import os
import sys
from typing import Dict, List, Callable

# Agregar el directorio ra√≠z del proyecto al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.utils.logger import get_logger

# Cargar variables de entorno
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

logger = get_logger(__name__)

class MigrationApp:
    """Aplicaci√≥n principal para gestionar migraciones"""
    
    def __init__(self):
        self.modules = self._initialize_modules()
    
    def _initialize_modules(self) -> Dict[str, Dict[str, Callable]]:
        """Inicializa los m√≥dulos y subm√≥dulos disponibles"""
        # Importar din√°micamente para evitar errores de importaci√≥n al inicio
        def migrate_roles_views():
            from src.core.roles_views_migration import main
            return main()
        
        return {
            "ms-users": {
                "roles-views": migrate_roles_views,
                # "users": migrate_users,  # TODO: Implementar
            },
            # TODO: Agregar otros microservicios
            # "ms-payments": {
            #     "payments": migrate_payments,
            # },
            # "ms-membership": {
            #     "memberships": migrate_memberships,
            # },
            # "ms-points": {
            #     "points": migrate_points,
            # },
            # "ms-orders": {
            #     "orders": migrate_orders,
            # }
        }
    
    def display_banner(self):
        """Muestra el banner de la aplicaci√≥n"""
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ NEXUS MIGRATION TOOL üöÄ                   ‚ïë
‚ïë              Migraci√≥n de Monolito a Microservicios             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
    
    def display_modules(self):
        """Muestra los m√≥dulos disponibles"""
        print("\nüì¶ M√ìDULOS DISPONIBLES:")
        print("=" * 50)
        
        for i, (module_name, submodules) in enumerate(self.modules.items(), 1):
            status = "‚úÖ Disponible" if submodules else "üöß En desarrollo"
            print(f"{i}. {module_name} - {status}")
            
            if submodules:
                for j, submodule_name in enumerate(submodules.keys(), 1):
                    print(f"   {i}.{j} {submodule_name}")
        
        print(f"{len(self.modules) + 1}. üö™ Salir")
    
    def display_submodules(self, module_name: str):
        """Muestra los subm√≥dulos de un m√≥dulo espec√≠fico"""
        submodules = self.modules.get(module_name, {})
        
        if not submodules:
            print(f"\n‚ö†Ô∏è  No hay subm√≥dulos disponibles para {module_name}")
            return
        
        print(f"\nüìã SUBM√ìDULOS DE {module_name.upper()}:")
        print("=" * 50)
        
        for i, submodule_name in enumerate(submodules.keys(), 1):
            print(f"{i}. {submodule_name}")
        
        print(f"{len(submodules) + 1}. ‚¨ÖÔ∏è  Volver al men√∫ principal")
    
    def validate_environment(self) -> bool:
        """Valida que las variables de entorno necesarias est√©n configuradas"""
        required_vars = ['NEXUS_POSTGRES_URL', 'MS_NEXUS_USER']
        missing_vars = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print("\n‚ùå VARIABLES DE ENTORNO FALTANTES:")
            for var in missing_vars:
                print(f"   - {var}")
            print("\nüí° Configura las variables en tu archivo .env:")
            print("   NEXUS_POSTGRES_URL=postgresql://user:pass@host:port/db")
            print("   MS_NEXUS_USER=mongodb://user:pass@host:port/db")
            return False
        
        print("‚úÖ Variables de entorno configuradas correctamente")
        return True
    
    def get_user_choice(self, options_count: int) -> int:
        """Obtiene la elecci√≥n del usuario"""
        while True:
            try:
                choice = input(f"\nüéØ Selecciona una opci√≥n (1-{options_count}): ").strip()
                choice_num = int(choice)
                
                if 1 <= choice_num <= options_count:
                    return choice_num
                else:
                    print(f"‚ùå Por favor, ingresa un n√∫mero entre 1 y {options_count}")
                    
            except ValueError:
                print("‚ùå Por favor, ingresa un n√∫mero v√°lido")
            except KeyboardInterrupt:
                print("\n\nüëã ¬°Hasta luego!")
                sys.exit(0)
    
    def confirm_migration(self, module_name: str, submodule_name: str) -> bool:
        """Confirma la migraci√≥n antes de ejecutarla"""
        print(f"\n‚ö†Ô∏è  CONFIRMACI√ìN DE MIGRACI√ìN")
        print("=" * 50)
        print(f"üì¶ M√≥dulo: {module_name}")
        print(f"üìã Subm√≥dulo: {submodule_name}")
        print("\nüö® ADVERTENCIA: Esta operaci√≥n:")
        print("   ‚Ä¢ Eliminar√° datos existentes en el destino")
        print("   ‚Ä¢ Migrar√° datos desde la base origen")
        print("   ‚Ä¢ Puede tomar varios minutos")
        
        while True:
            confirm = input("\n¬øEst√°s seguro de continuar? (s/N): ").strip().lower()
            
            if confirm in ['s', 'si', 's√≠', 'y', 'yes']:
                return True
            elif confirm in ['n', 'no', ''] or not confirm:
                return False
            else:
                print("‚ùå Por favor responde 's' para s√≠ o 'n' para no")
    
    def execute_migration(self, module_name: str, submodule_name: str) -> bool:
        """Ejecuta la migraci√≥n seleccionada"""
        migration_func = self.modules[module_name][submodule_name]
        
        print(f"\nüöÄ INICIANDO MIGRACI√ìN: {module_name} -> {submodule_name}")
        print("=" * 60)
        
        try:
            success = migration_func()
            
            if success:
                print(f"\nüéâ ¬°MIGRACI√ìN COMPLETADA EXITOSAMENTE!")
                print(f"‚úÖ {module_name} -> {submodule_name} migrado correctamente")
            else:
                print(f"\nüí• MIGRACI√ìN FALL√ì")
                print(f"‚ùå Error en {module_name} -> {submodule_name}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error cr√≠tico durante la migraci√≥n: {str(e)}")
            print(f"\nüí• ERROR CR√çTICO: {str(e)}")
            return False
    
    def run(self):
        """Ejecuta la aplicaci√≥n principal"""
        self.display_banner()
        
        # Validar entorno
        if not self.validate_environment():
            print("\n‚ùå No se puede continuar sin las variables de entorno")
            sys.exit(1)
        
        while True:
            self.display_modules()
            
            # Obtener selecci√≥n de m√≥dulo
            module_choice = self.get_user_choice(len(self.modules) + 1)
            
            # Opci√≥n de salir
            if module_choice == len(self.modules) + 1:
                print("\nüëã ¬°Hasta luego!")
                break
            
            # Obtener m√≥dulo seleccionado
            module_names = list(self.modules.keys())
            selected_module = module_names[module_choice - 1]
            submodules = self.modules[selected_module]
            
            # Verificar si el m√≥dulo tiene subm√≥dulos
            if not submodules:
                print(f"\nüöß {selected_module} est√° en desarrollo. Intenta m√°s tarde.")
                input("\nPresiona Enter para continuar...")
                continue
            
            # Mostrar subm√≥dulos
            while True:
                self.display_submodules(selected_module)
                
                # Obtener selecci√≥n de subm√≥dulo
                submodule_choice = self.get_user_choice(len(submodules) + 1)
                
                # Opci√≥n de volver
                if submodule_choice == len(submodules) + 1:
                    break
                
                # Obtener subm√≥dulo seleccionado
                submodule_names = list(submodules.keys())
                selected_submodule = submodule_names[submodule_choice - 1]
                
                # Confirmar migraci√≥n
                if self.confirm_migration(selected_module, selected_submodule):
                    # Ejecutar migraci√≥n
                    success = self.execute_migration(selected_module, selected_submodule)
                    
                    if success:
                        # Preguntar si quiere hacer otra migraci√≥n
                        while True:
                            another = input("\n¬øQuieres realizar otra migraci√≥n? (s/N): ").strip().lower()
                            if another in ['s', 'si', 's√≠', 'y', 'yes']:
                                break
                            elif another in ['n', 'no', ''] or not another:
                                print("\nüëã ¬°Hasta luego!")
                                sys.exit(0)
                            else:
                                print("‚ùå Por favor responde 's' para s√≠ o 'n' para no")
                    else:
                        input("\nPresiona Enter para continuar...")
                else:
                    print("‚ùå Migraci√≥n cancelada")
                    input("\nPresiona Enter para continuar...")

def main():
    """Funci√≥n principal"""
    try:
        app = MigrationApp()
        app.run()
    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego!")
        sys.exit(0)
    except Exception as e:
        logger.error(f"Error en la aplicaci√≥n: {str(e)}")
        print(f"\nüí• Error inesperado: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()